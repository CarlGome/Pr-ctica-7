

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat May 07 22:11:51 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18  0000                     
    19                           ; Version 2.35
    20                           ; Generated 05/05/2021 GMT
    21                           ; 
    22                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F45K50 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _TRISCbits	set	3988
    55  0000                     _LATC	set	3979
    56  0000                     _ANSELB	set	3932
    57  0000                     _ANSELC	set	3933
    58  0000                     _OSCCON	set	4051
    59  0000                     _PORTBbits	set	3969
    60  0000                     _PORTD	set	3971
    61  0000                     _LATCbits	set	3979
    62  0000                     _TRISB	set	3987
    63  0000                     _ANSELD	set	3934
    64  0000                     _TRISC	set	3988
    65  0000                     _TRISD	set	3989
    66  0000                     _LATD	set	3980
    67  0000                     _LATBbits	set	3978
    68                           
    69                           ; #config settings
    70                           
    71                           	psect	cinit
    72  0078A6                     __pcinit:
    73                           	callstack 0
    74  0078A6                     start_initialization:
    75                           	callstack 0
    76  0078A6                     __initialization:
    77                           	callstack 0
    78  0078A6                     end_of_initialization:
    79                           	callstack 0
    80  0078A6                     __end_of__initialization:
    81                           	callstack 0
    82  0078A6  0E00               	movlw	low (__Lmediumconst shr (0+16))
    83  0078A8  6EF8               	movwf	tblptru,c
    84  0078AA  0100               	movlb	0
    85  0078AC  EF8B  F03D         	goto	_main	;jump to C main() function
    86                           
    87                           	psect	cstackCOMRAM
    88  000001                     __pcstackCOMRAM:
    89                           	callstack 0
    90  000001                     ??_key_scanner:
    91  000001                     ??_send2LCD:
    92  000001                     ??_char_to_seg:
    93  000001                     ?___awdiv:
    94                           	callstack 0
    95  000001                     LCD_cmd@cx:
    96                           	callstack 0
    97  000001                     ___awdiv@dividend:
    98                           	callstack 0
    99                           
   100                           ; 2 bytes @ 0x0
   101  000001                     	ds	1
   102  000002                     ??_LCD_init:
   103                           
   104                           ; 1 bytes @ 0x1
   105  000002                     	ds	1
   106  000003                     send2LCD@xy:
   107                           	callstack 0
   108  000003                     char_to_seg@num:
   109                           	callstack 0
   110  000003                     ___awdiv@divisor:
   111                           	callstack 0
   112                           
   113                           ; 2 bytes @ 0x2
   114  000003                     	ds	1
   115  000004                     char_to_seg@segments:
   116                           	callstack 0
   117                           
   118                           ; 1 bytes @ 0x3
   119  000004                     	ds	1
   120  000005                     ___awdiv@counter:
   121                           	callstack 0
   122                           
   123                           ; 1 bytes @ 0x4
   124  000005                     	ds	1
   125  000006                     ___awdiv@sign:
   126                           	callstack 0
   127                           
   128                           ; 1 bytes @ 0x5
   129  000006                     	ds	1
   130  000007                     ___awdiv@quotient:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x6
   134  000007                     	ds	2
   135  000009                     ??_main:
   136                           
   137                           ; 1 bytes @ 0x8
   138  000009                     	ds	2
   139  00000B                     main@simb:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0xA
   143  00000B                     	ds	1
   144  00000C                     main@num1:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0xB
   148  00000C                     	ds	1
   149  00000D                     main@num2:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0xC
   153  00000D                     	ds	1
   154  00000E                     main@res:
   155                           	callstack 0
   156                           
   157                           ; 1 bytes @ 0xD
   158  00000E                     	ds	1
   159  00000F                     main@key:
   160                           	callstack 0
   161                           
   162                           ; 1 bytes @ 0xE
   163  00000F                     	ds	1
   164                           
   165 ;;
   166 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   167 ;;
   168 ;; *************** function _main *****************
   169 ;; Defined at:
   170 ;;		line 23 in file "main.c"
   171 ;; Parameters:    Size  Location     Type
   172 ;;		None
   173 ;; Auto vars:     Size  Location     Type
   174 ;;  key             1   14[COMRAM] unsigned char 
   175 ;;  res             1   13[COMRAM] unsigned char 
   176 ;;  num2            1   12[COMRAM] unsigned char 
   177 ;;  num1            1   11[COMRAM] unsigned char 
   178 ;;  simb            1   10[COMRAM] unsigned char 
   179 ;; Return value:  Size  Location     Type
   180 ;;                  1    wreg      void 
   181 ;; Registers used:
   182 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   183 ;; Tracked objects:
   184 ;;		On entry : 0/0
   185 ;;		On exit  : 0/0
   186 ;;		Unchanged: 0/0
   187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   188 ;;      Params:         0       0       0       0       0       0       0       0       0
   189 ;;      Locals:         5       0       0       0       0       0       0       0       0
   190 ;;      Temps:          2       0       0       0       0       0       0       0       0
   191 ;;      Totals:         7       0       0       0       0       0       0       0       0
   192 ;;Total ram usage:        7 bytes
   193 ;; Hardware stack levels required when called: 2
   194 ;; This function calls:
   195 ;;		_LCD_init
   196 ;;		___awdiv
   197 ;;		_char_to_seg
   198 ;;		_key_scanner
   199 ;;		_send2LCD
   200 ;; This function is called by:
   201 ;;		Startup code after reset
   202 ;; This function uses a non-reentrant model
   203 ;;
   204                           
   205                           	psect	text0
   206  007B16                     __ptext0:
   207                           	callstack 0
   208  007B16                     _main:
   209                           	callstack 29
   210  007B16                     
   211                           ;main.c: 24:     OSCCON = 0x74;
   212  007B16  0E74               	movlw	116
   213  007B18  6ED3               	movwf	211,c	;volatile
   214                           
   215                           ;main.c: 25:     ANSELC = 0;
   216  007B1A  0E00               	movlw	0
   217  007B1C  010F               	movlb	15	; () banked
   218  007B1E  6F5D               	movwf	93,b	;volatile
   219                           
   220                           ;main.c: 26:     TRISC = 0x00;
   221  007B20  0E00               	movlw	0
   222  007B22  6E94               	movwf	148,c	;volatile
   223                           
   224                           ;main.c: 27:     ANSELD = 0;
   225  007B24  0E00               	movlw	0
   226  007B26  6F5E               	movwf	94,b	;volatile
   227                           
   228                           ;main.c: 28:     TRISD = 0x00;
   229  007B28  0E00               	movlw	0
   230  007B2A  6E95               	movwf	149,c	;volatile
   231                           
   232                           ;main.c: 29:     ANSELB = 0;
   233  007B2C  0E00               	movlw	0
   234  007B2E  6F5C               	movwf	92,b	;volatile
   235                           
   236                           ;main.c: 30:     TRISB = 0xF0;
   237  007B30  0EF0               	movlw	240
   238  007B32  6E93               	movwf	147,c	;volatile
   239                           
   240                           ;main.c: 32:     TRISD = 0x00;
   241  007B34  0E00               	movlw	0
   242  007B36  6E95               	movwf	149,c	;volatile
   243  007B38                     
   244                           ; BSR set to: 15
   245                           ;main.c: 34:     LATCbits.LATC2 = 0;
   246  007B38  948B               	bcf	139,2,c	;volatile
   247  007B3A                     
   248                           ; BSR set to: 15
   249                           ;main.c: 35:     LATCbits.LATC1 = 0;
   250  007B3A  928B               	bcf	139,1,c	;volatile
   251  007B3C                     
   252                           ; BSR set to: 15
   253                           ;main.c: 36:     LATCbits.LATC0 = 0;
   254  007B3C  908B               	bcf	139,0,c	;volatile
   255  007B3E                     
   256                           ; BSR set to: 15
   257                           ;main.c: 38:     LCD_init();
   258  007B3E  EC77  F03C         	call	_LCD_init	;wreg free
   259  007B42                     
   260                           ;main.c: 39:     char key = key_scanner();
   261  007B42  ECAE  F03E         	call	_key_scanner	;wreg free
   262  007B46  6E0F               	movwf	main@key^0,c
   263                           
   264                           ;main.c: 41:     char res = 0;
   265  007B48  0E00               	movlw	0
   266  007B4A  6E0E               	movwf	main@res^0,c
   267                           
   268                           ;main.c: 42:     char num1 = 0;
   269  007B4C  0E00               	movlw	0
   270  007B4E  6E0C               	movwf	main@num1^0,c
   271                           
   272                           ;main.c: 43:     char num2 = 0;
   273  007B50  0E00               	movlw	0
   274  007B52  6E0D               	movwf	main@num2^0,c
   275                           
   276                           ;main.c: 44:     while (key == 'x')
   277  007B54  EFAF  F03D         	goto	l1217
   278  007B58                     l1215:
   279                           
   280                           ;main.c: 45:     key = key_scanner();
   281  007B58  ECAE  F03E         	call	_key_scanner	;wreg free
   282  007B5C  6E0F               	movwf	main@key^0,c
   283  007B5E                     l1217:
   284                           
   285                           ;main.c: 44:     while (key == 'x')
   286  007B5E  0E78               	movlw	120
   287  007B60  180F               	xorwf	main@key^0,w,c
   288  007B62  B4D8               	btfsc	status,2,c
   289  007B64  EFB6  F03D         	goto	u391
   290  007B68  EFB8  F03D         	goto	u390
   291  007B6C                     u391:
   292  007B6C  EFAC  F03D         	goto	l1215
   293  007B70                     u390:
   294  007B70                     
   295                           ;main.c: 46:     send2LCD(char_to_seg(key));
   296  007B70  500F               	movf	main@key^0,w,c
   297  007B72  EC09  F03D         	call	_char_to_seg
   298  007B76  EC62  F03C         	call	_send2LCD
   299                           
   300                           ;main.c: 47:     num1 = char_to_seg(key);
   301  007B7A  500F               	movf	main@key^0,w,c
   302  007B7C  EC09  F03D         	call	_char_to_seg
   303  007B80  6E0C               	movwf	main@num1^0,c
   304  007B82                     
   305                           ;main.c: 48:     key = 'x';
   306  007B82  0E78               	movlw	120
   307  007B84  6E0F               	movwf	main@key^0,c
   308  007B86                     
   309                           ;main.c: 49:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   310  007B86  0E15               	movlw	21
   311  007B88  6E0A               	movwf	(??_main+1)^0,c
   312  007B8A  0E4B               	movlw	75
   313  007B8C  6E09               	movwf	??_main^0,c
   314  007B8E  0EBE               	movlw	190
   315  007B90                     u487:
   316  007B90  2EE8               	decfsz	wreg,f,c
   317  007B92  D7FE               	bra	u487
   318  007B94  2E09               	decfsz	??_main^0,f,c
   319  007B96  D7FC               	bra	u487
   320  007B98  2E0A               	decfsz	(??_main+1)^0,f,c
   321  007B9A  D7FA               	bra	u487
   322  007B9C  D000               	nop2	
   323                           
   324                           ;main.c: 50:     while (key == 'x')
   325  007B9E  EFD4  F03D         	goto	l1227
   326  007BA2                     l1225:
   327                           
   328                           ;main.c: 51:     key = key_scanner();
   329  007BA2  ECAE  F03E         	call	_key_scanner	;wreg free
   330  007BA6  6E0F               	movwf	main@key^0,c
   331  007BA8                     l1227:
   332                           
   333                           ;main.c: 50:     while (key == 'x')
   334  007BA8  0E78               	movlw	120
   335  007BAA  180F               	xorwf	main@key^0,w,c
   336  007BAC  B4D8               	btfsc	status,2,c
   337  007BAE  EFDB  F03D         	goto	u401
   338  007BB2  EFDD  F03D         	goto	u400
   339  007BB6                     u401:
   340  007BB6  EFD1  F03D         	goto	l1225
   341  007BBA                     u400:
   342  007BBA                     
   343                           ;main.c: 52:     send2LCD(char_to_seg(key));
   344  007BBA  500F               	movf	main@key^0,w,c
   345  007BBC  EC09  F03D         	call	_char_to_seg
   346  007BC0  EC62  F03C         	call	_send2LCD
   347  007BC4                     
   348                           ;main.c: 53:     simb = key;
   349  007BC4  C00F  F00B         	movff	main@key,main@simb
   350  007BC8                     
   351                           ;main.c: 54:     key = 'x';
   352  007BC8  0E78               	movlw	120
   353  007BCA  6E0F               	movwf	main@key^0,c
   354  007BCC                     
   355                           ;main.c: 55:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   356  007BCC  0E15               	movlw	21
   357  007BCE  6E0A               	movwf	(??_main+1)^0,c
   358  007BD0  0E4B               	movlw	75
   359  007BD2  6E09               	movwf	??_main^0,c
   360  007BD4  0EBE               	movlw	190
   361  007BD6                     u497:
   362  007BD6  2EE8               	decfsz	wreg,f,c
   363  007BD8  D7FE               	bra	u497
   364  007BDA  2E09               	decfsz	??_main^0,f,c
   365  007BDC  D7FC               	bra	u497
   366  007BDE  2E0A               	decfsz	(??_main+1)^0,f,c
   367  007BE0  D7FA               	bra	u497
   368  007BE2  D000               	nop2	
   369                           
   370                           ;main.c: 56:     while (key == 'x')
   371  007BE4  EFF7  F03D         	goto	l1239
   372  007BE8                     l1237:
   373                           
   374                           ;main.c: 57:     key = key_scanner();
   375  007BE8  ECAE  F03E         	call	_key_scanner	;wreg free
   376  007BEC  6E0F               	movwf	main@key^0,c
   377  007BEE                     l1239:
   378                           
   379                           ;main.c: 56:     while (key == 'x')
   380  007BEE  0E78               	movlw	120
   381  007BF0  180F               	xorwf	main@key^0,w,c
   382  007BF2  B4D8               	btfsc	status,2,c
   383  007BF4  EFFE  F03D         	goto	u411
   384  007BF8  EF00  F03E         	goto	u410
   385  007BFC                     u411:
   386  007BFC  EFF4  F03D         	goto	l1237
   387  007C00                     u410:
   388  007C00                     
   389                           ;main.c: 58:     send2LCD(char_to_seg(key));
   390  007C00  500F               	movf	main@key^0,w,c
   391  007C02  EC09  F03D         	call	_char_to_seg
   392  007C06  EC62  F03C         	call	_send2LCD
   393                           
   394                           ;main.c: 59:     num2 = char_to_seg(key);
   395  007C0A  500F               	movf	main@key^0,w,c
   396  007C0C  EC09  F03D         	call	_char_to_seg
   397  007C10  6E0D               	movwf	main@num2^0,c
   398  007C12                     
   399                           ;main.c: 60:     key = 'x';
   400  007C12  0E78               	movlw	120
   401  007C14  6E0F               	movwf	main@key^0,c
   402  007C16                     
   403                           ;main.c: 61:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   404  007C16  0E15               	movlw	21
   405  007C18  6E0A               	movwf	(??_main+1)^0,c
   406  007C1A  0E4B               	movlw	75
   407  007C1C  6E09               	movwf	??_main^0,c
   408  007C1E  0EBE               	movlw	190
   409  007C20                     u507:
   410  007C20  2EE8               	decfsz	wreg,f,c
   411  007C22  D7FE               	bra	u507
   412  007C24  2E09               	decfsz	??_main^0,f,c
   413  007C26  D7FC               	bra	u507
   414  007C28  2E0A               	decfsz	(??_main+1)^0,f,c
   415  007C2A  D7FA               	bra	u507
   416  007C2C  D000               	nop2	
   417                           
   418                           ;main.c: 62:     while (key != 14)
   419  007C2E  EF1C  F03E         	goto	l1249
   420  007C32                     l1247:
   421                           
   422                           ;main.c: 63:         key = key_scanner();
   423  007C32  ECAE  F03E         	call	_key_scanner	;wreg free
   424  007C36  6E0F               	movwf	main@key^0,c
   425  007C38                     l1249:
   426                           
   427                           ;main.c: 62:     while (key != 14)
   428  007C38  0E0E               	movlw	14
   429  007C3A  180F               	xorwf	main@key^0,w,c
   430  007C3C  A4D8               	btfss	status,2,c
   431  007C3E  EF23  F03E         	goto	u421
   432  007C42  EF25  F03E         	goto	u420
   433  007C46                     u421:
   434  007C46  EF19  F03E         	goto	l1247
   435  007C4A                     u420:
   436  007C4A                     
   437                           ;main.c: 64:     send2LCD(0b00111101);
   438  007C4A  0E3D               	movlw	61
   439  007C4C  EC62  F03C         	call	_send2LCD
   440  007C50                     
   441                           ;main.c: 65:         if (simb == 10){
   442  007C50  0E0A               	movlw	10
   443  007C52  180B               	xorwf	main@simb^0,w,c
   444  007C54  A4D8               	btfss	status,2,c
   445  007C56  EF2F  F03E         	goto	u431
   446  007C5A  EF31  F03E         	goto	u430
   447  007C5E                     u431:
   448  007C5E  EF3B  F03E         	goto	l1259
   449  007C62                     u430:
   450  007C62                     
   451                           ;main.c: 66:             res = ((num1-48)+(num2-48));
   452  007C62  500D               	movf	main@num2^0,w,c
   453  007C64  240C               	addwf	main@num1^0,w,c
   454  007C66  0FA0               	addlw	160
   455  007C68  6E0E               	movwf	main@res^0,c
   456  007C6A                     
   457                           ;main.c: 67:         send2LCD(res +48);}
   458  007C6A  500E               	movf	main@res^0,w,c
   459  007C6C  0F30               	addlw	48
   460  007C6E  EC62  F03C         	call	_send2LCD
   461  007C72  EF84  F03E         	goto	l1275
   462  007C76                     l1259:
   463  007C76  0E0B               	movlw	11
   464  007C78  180B               	xorwf	main@simb^0,w,c
   465  007C7A  A4D8               	btfss	status,2,c
   466  007C7C  EF42  F03E         	goto	u441
   467  007C80  EF44  F03E         	goto	u440
   468  007C84                     u441:
   469  007C84  EF4D  F03E         	goto	l1265
   470  007C88                     u440:
   471  007C88                     
   472                           ;main.c: 69:             res = ((num1-48)-(num2-48));
   473  007C88  500D               	movf	main@num2^0,w,c
   474  007C8A  5C0C               	subwf	main@num1^0,w,c
   475  007C8C  6E0E               	movwf	main@res^0,c
   476  007C8E                     
   477                           ;main.c: 70:         send2LCD(res +48);
   478  007C8E  500E               	movf	main@res^0,w,c
   479  007C90  0F30               	addlw	48
   480  007C92  EC62  F03C         	call	_send2LCD
   481                           
   482                           ;main.c: 71:         }
   483  007C96  EF84  F03E         	goto	l1275
   484  007C9A                     l1265:
   485  007C9A  0E0C               	movlw	12
   486  007C9C  180B               	xorwf	main@simb^0,w,c
   487  007C9E  A4D8               	btfss	status,2,c
   488  007CA0  EF54  F03E         	goto	u451
   489  007CA4  EF56  F03E         	goto	u450
   490  007CA8                     u451:
   491  007CA8  EF65  F03E         	goto	l1271
   492  007CAC                     u450:
   493  007CAC                     
   494                           ;main.c: 73:             res = ((num1-48)*(num2-48));
   495  007CAC  C00D  F009         	movff	main@num2,??_main
   496  007CB0  0ED0               	movlw	208
   497  007CB2  2609               	addwf	??_main^0,f,c
   498  007CB4  500C               	movf	main@num1^0,w,c
   499  007CB6  0FD0               	addlw	208
   500  007CB8  0209               	mulwf	??_main^0,c
   501  007CBA  CFF3 F00E          	movff	prodl,main@res
   502  007CBE                     
   503                           ;main.c: 74:         send2LCD(res +48);
   504  007CBE  500E               	movf	main@res^0,w,c
   505  007CC0  0F30               	addlw	48
   506  007CC2  EC62  F03C         	call	_send2LCD
   507                           
   508                           ;main.c: 75:         }
   509  007CC6  EF84  F03E         	goto	l1275
   510  007CCA                     l1271:
   511  007CCA  0E0D               	movlw	13
   512  007CCC  180B               	xorwf	main@simb^0,w,c
   513  007CCE  A4D8               	btfss	status,2,c
   514  007CD0  EF6C  F03E         	goto	u461
   515  007CD4  EF6E  F03E         	goto	u460
   516  007CD8                     u461:
   517  007CD8  EF84  F03E         	goto	l62
   518  007CDC                     u460:
   519  007CDC                     
   520                           ;main.c: 77:             res = ((num1-48)/(num2-48));
   521  007CDC  0ED0               	movlw	208
   522  007CDE  240C               	addwf	main@num1^0,w,c
   523  007CE0  6E01               	movwf	___awdiv@dividend^0,c
   524  007CE2  6A02               	clrf	(___awdiv@dividend+1)^0,c
   525  007CE4  0EFF               	movlw	255
   526  007CE6  2202               	addwfc	(___awdiv@dividend+1)^0,f,c
   527  007CE8  0ED0               	movlw	208
   528  007CEA  240D               	addwf	main@num2^0,w,c
   529  007CEC  6E03               	movwf	___awdiv@divisor^0,c
   530  007CEE  6A04               	clrf	(___awdiv@divisor+1)^0,c
   531  007CF0  0EFF               	movlw	255
   532  007CF2  2204               	addwfc	(___awdiv@divisor+1)^0,f,c
   533  007CF4  ECA7  F03C         	call	___awdiv	;wreg free
   534  007CF8  5001               	movf	?___awdiv^0,w,c
   535  007CFA  6E0E               	movwf	main@res^0,c
   536                           
   537                           ;main.c: 78:         send2LCD(res +48);
   538  007CFC  500E               	movf	main@res^0,w,c
   539  007CFE  0F30               	addlw	48
   540  007D00  EC62  F03C         	call	_send2LCD
   541  007D04  EF84  F03E         	goto	l1275
   542  007D08                     l62:
   543  007D08                     l1275:
   544                           
   545                           ;main.c: 80:     key = 'x';
   546  007D08  0E78               	movlw	120
   547  007D0A  6E0F               	movwf	main@key^0,c
   548  007D0C                     
   549                           ;main.c: 81:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   550  007D0C  0E15               	movlw	21
   551  007D0E  6E0A               	movwf	(??_main+1)^0,c
   552  007D10  0E4B               	movlw	75
   553  007D12  6E09               	movwf	??_main^0,c
   554  007D14  0EBE               	movlw	190
   555  007D16                     u517:
   556  007D16  2EE8               	decfsz	wreg,f,c
   557  007D18  D7FE               	bra	u517
   558  007D1A  2E09               	decfsz	??_main^0,f,c
   559  007D1C  D7FC               	bra	u517
   560  007D1E  2E0A               	decfsz	(??_main+1)^0,f,c
   561  007D20  D7FA               	bra	u517
   562  007D22  D000               	nop2	
   563                           
   564                           ;main.c: 82:     while (key != 15)
   565  007D24  EF97  F03E         	goto	l1281
   566  007D28                     l1279:
   567                           
   568                           ;main.c: 83:     key = key_scanner();
   569  007D28  ECAE  F03E         	call	_key_scanner	;wreg free
   570  007D2C  6E0F               	movwf	main@key^0,c
   571  007D2E                     l1281:
   572                           
   573                           ;main.c: 82:     while (key != 15)
   574  007D2E  0E0F               	movlw	15
   575  007D30  180F               	xorwf	main@key^0,w,c
   576  007D32  A4D8               	btfss	status,2,c
   577  007D34  EF9E  F03E         	goto	u471
   578  007D38  EFA0  F03E         	goto	u470
   579  007D3C                     u471:
   580  007D3C  EF94  F03E         	goto	l1279
   581  007D40                     u470:
   582  007D40                     
   583                           ;main.c: 84:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   584  007D40  0E15               	movlw	21
   585  007D42  6E0A               	movwf	(??_main+1)^0,c
   586  007D44  0E4B               	movlw	75
   587  007D46  6E09               	movwf	??_main^0,c
   588  007D48  0EBE               	movlw	190
   589  007D4A                     u527:
   590  007D4A  2EE8               	decfsz	wreg,f,c
   591  007D4C  D7FE               	bra	u527
   592  007D4E  2E09               	decfsz	??_main^0,f,c
   593  007D50  D7FC               	bra	u527
   594  007D52  2E0A               	decfsz	(??_main+1)^0,f,c
   595  007D54  D7FA               	bra	u527
   596  007D56  D000               	nop2	
   597  007D58  EF00  F000         	goto	start
   598  007D5C                     __end_of_main:
   599                           	callstack 0
   600                           
   601 ;; *************** function _send2LCD *****************
   602 ;; Defined at:
   603 ;;		line 88 in file "main.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  xy              1    wreg     unsigned char 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  xy              1    2[COMRAM] unsigned char 
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, status,2, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   617 ;;      Params:         0       0       0       0       0       0       0       0       0
   618 ;;      Locals:         1       0       0       0       0       0       0       0       0
   619 ;;      Temps:          2       0       0       0       0       0       0       0       0
   620 ;;      Totals:         3       0       0       0       0       0       0       0       0
   621 ;;Total ram usage:        3 bytes
   622 ;; Hardware stack levels used: 1
   623 ;; This function calls:
   624 ;;		Nothing
   625 ;; This function is called by:
   626 ;;		_main
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text1
   631  0078C4                     __ptext1:
   632                           	callstack 0
   633  0078C4                     _send2LCD:
   634                           	callstack 30
   635                           
   636                           ;incstack = 0
   637                           ;send2LCD@xy stored from wreg
   638  0078C4  6E03               	movwf	send2LCD@xy^0,c
   639  0078C6                     
   640                           ;main.c: 89:     LATCbits.LATC2 = 1;
   641  0078C6  848B               	bsf	139,2,c	;volatile
   642                           
   643                           ;main.c: 90:     LATCbits.LATC1 = 0;
   644  0078C8  928B               	bcf	139,1,c	;volatile
   645                           
   646                           ;main.c: 91:     LATCbits.LATC0 = 1;
   647  0078CA  808B               	bsf	139,0,c	;volatile
   648  0078CC                     
   649                           ;main.c: 92:     LATD = xy;
   650  0078CC  C003  FF8C         	movff	send2LCD@xy,3980	;volatile
   651  0078D0                     
   652                           ;main.c: 93:     __nop();
   653  0078D0  F000               	nop	
   654  0078D2                     
   655                           ;main.c: 94:     __nop();
   656  0078D2  F000               	nop	
   657  0078D4                     
   658                           ;main.c: 95:     LATCbits.LATC0 = 0;
   659  0078D4  908B               	bcf	139,0,c	;volatile
   660  0078D6                     
   661                           ;main.c: 96:     _delay((unsigned long)((250)*(8000000/4000.0)));
   662  0078D6  0E03               	movlw	3
   663  0078D8  6E02               	movwf	(??_send2LCD+1)^0,c
   664  0078DA  0E8A               	movlw	138
   665  0078DC  6E01               	movwf	??_send2LCD^0,c
   666  0078DE  0E56               	movlw	86
   667  0078E0                     u537:
   668  0078E0  2EE8               	decfsz	wreg,f,c
   669  0078E2  D7FE               	bra	u537
   670  0078E4  2E01               	decfsz	??_send2LCD^0,f,c
   671  0078E6  D7FC               	bra	u537
   672  0078E8  2E02               	decfsz	(??_send2LCD+1)^0,f,c
   673  0078EA  D7FA               	bra	u537
   674  0078EC  0012               	return		;funcret
   675  0078EE                     __end_of_send2LCD:
   676                           	callstack 0
   677                           
   678 ;; *************** function _key_scanner *****************
   679 ;; Defined at:
   680 ;;		line 139 in file "main.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      unsigned char 
   687 ;; Registers used:
   688 ;;		wreg
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   694 ;;      Params:         0       0       0       0       0       0       0       0       0
   695 ;;      Locals:         0       0       0       0       0       0       0       0       0
   696 ;;      Temps:          1       0       0       0       0       0       0       0       0
   697 ;;      Totals:         1       0       0       0       0       0       0       0       0
   698 ;;Total ram usage:        1 bytes
   699 ;; Hardware stack levels used: 1
   700 ;; This function calls:
   701 ;;		Nothing
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text2
   708  007D5C                     __ptext2:
   709                           	callstack 0
   710  007D5C                     _key_scanner:
   711                           	callstack 30
   712  007D5C                     
   713                           ;main.c: 141:     LATBbits.LB0 = 0;
   714  007D5C  908A               	bcf	138,0,c	;volatile
   715                           
   716                           ;main.c: 142:     LATBbits.LB1 = 1;
   717  007D5E  828A               	bsf	138,1,c	;volatile
   718                           
   719                           ;main.c: 143:     LATBbits.LB2 = 1;
   720  007D60  848A               	bsf	138,2,c	;volatile
   721                           
   722                           ;main.c: 144:     LATBbits.LB3 = 1;
   723  007D62  868A               	bsf	138,3,c	;volatile
   724  007D64                     
   725                           ;main.c: 145:     _delay((unsigned long)((10)*(8000000/4000.0)));
   726  007D64  0E1A               	movlw	26
   727  007D66  6E01               	movwf	??_key_scanner^0,c
   728  007D68  0EF8               	movlw	248
   729  007D6A                     u547:
   730  007D6A  2EE8               	decfsz	wreg,f,c
   731  007D6C  D7FE               	bra	u547
   732  007D6E  2E01               	decfsz	??_key_scanner^0,f,c
   733  007D70  D7FC               	bra	u547
   734  007D72  D000               	nop2	
   735  007D74                     
   736                           ;main.c: 146:     if (PORTBbits.RB4 == 0) {_delay((unsigned long)((10)*(8000000/4000.0))
      +                          ); return 1;}
   737  007D74  B881               	btfsc	129,4,c	;volatile
   738  007D76  EFBF  F03E         	goto	u11
   739  007D7A  EFC1  F03E         	goto	u10
   740  007D7E                     u11:
   741  007D7E  EFCC  F03E         	goto	l87
   742  007D82                     u10:
   743  007D82  0E1A               	movlw	26
   744  007D84  6E01               	movwf	??_key_scanner^0,c
   745  007D86  0EF8               	movlw	248
   746  007D88                     u557:
   747  007D88  2EE8               	decfsz	wreg,f,c
   748  007D8A  D7FE               	bra	u557
   749  007D8C  2E01               	decfsz	??_key_scanner^0,f,c
   750  007D8E  D7FC               	bra	u557
   751  007D90  D000               	nop2	
   752  007D92  0E01               	movlw	1
   753  007D94  EFFF  F03F         	goto	l88
   754  007D98                     l87:
   755  007D98  BA81               	btfsc	129,5,c	;volatile
   756  007D9A  EFD1  F03E         	goto	u21
   757  007D9E  EFD3  F03E         	goto	u20
   758  007DA2                     u21:
   759  007DA2  EFDE  F03E         	goto	l90
   760  007DA6                     u20:
   761  007DA6  0E1A               	movlw	26
   762  007DA8  6E01               	movwf	??_key_scanner^0,c
   763  007DAA  0EF8               	movlw	248
   764  007DAC                     u567:
   765  007DAC  2EE8               	decfsz	wreg,f,c
   766  007DAE  D7FE               	bra	u567
   767  007DB0  2E01               	decfsz	??_key_scanner^0,f,c
   768  007DB2  D7FC               	bra	u567
   769  007DB4  D000               	nop2	
   770  007DB6  0E02               	movlw	2
   771  007DB8  EFFF  F03F         	goto	l88
   772  007DBC                     l90:
   773  007DBC  BC81               	btfsc	129,6,c	;volatile
   774  007DBE  EFE3  F03E         	goto	u31
   775  007DC2  EFE5  F03E         	goto	u30
   776  007DC6                     u31:
   777  007DC6  EFF0  F03E         	goto	l92
   778  007DCA                     u30:
   779  007DCA  0E1A               	movlw	26
   780  007DCC  6E01               	movwf	??_key_scanner^0,c
   781  007DCE  0EF8               	movlw	248
   782  007DD0                     u577:
   783  007DD0  2EE8               	decfsz	wreg,f,c
   784  007DD2  D7FE               	bra	u577
   785  007DD4  2E01               	decfsz	??_key_scanner^0,f,c
   786  007DD6  D7FC               	bra	u577
   787  007DD8  D000               	nop2	
   788  007DDA  0E03               	movlw	3
   789  007DDC  EFFF  F03F         	goto	l88
   790  007DE0                     l92:
   791  007DE0  BE81               	btfsc	129,7,c	;volatile
   792  007DE2  EFF5  F03E         	goto	u41
   793  007DE6  EFF7  F03E         	goto	u40
   794  007DEA                     u41:
   795  007DEA  EF02  F03F         	goto	l89
   796  007DEE                     u40:
   797  007DEE  0E1A               	movlw	26
   798  007DF0  6E01               	movwf	??_key_scanner^0,c
   799  007DF2  0EF8               	movlw	248
   800  007DF4                     u587:
   801  007DF4  2EE8               	decfsz	wreg,f,c
   802  007DF6  D7FE               	bra	u587
   803  007DF8  2E01               	decfsz	??_key_scanner^0,f,c
   804  007DFA  D7FC               	bra	u587
   805  007DFC  D000               	nop2	
   806  007DFE  0E0A               	movlw	10
   807  007E00  EFFF  F03F         	goto	l88
   808  007E04                     l89:
   809                           
   810                           ;main.c: 150:     LATBbits.LB0 = 1;
   811  007E04  808A               	bsf	138,0,c	;volatile
   812                           
   813                           ;main.c: 151:     LATBbits.LB1 = 0;
   814  007E06  928A               	bcf	138,1,c	;volatile
   815                           
   816                           ;main.c: 152:     LATBbits.LB2 = 1;
   817  007E08  848A               	bsf	138,2,c	;volatile
   818                           
   819                           ;main.c: 153:     LATBbits.LB3 = 1;
   820  007E0A  868A               	bsf	138,3,c	;volatile
   821  007E0C                     
   822                           ;main.c: 154:     _delay((unsigned long)((10)*(8000000/4000.0)));
   823  007E0C  0E1A               	movlw	26
   824  007E0E  6E01               	movwf	??_key_scanner^0,c
   825  007E10  0EF8               	movlw	248
   826  007E12                     u597:
   827  007E12  2EE8               	decfsz	wreg,f,c
   828  007E14  D7FE               	bra	u597
   829  007E16  2E01               	decfsz	??_key_scanner^0,f,c
   830  007E18  D7FC               	bra	u597
   831  007E1A  D000               	nop2	
   832  007E1C                     
   833                           ;main.c: 155:     if (PORTBbits.RB4 == 0) {_delay((unsigned long)((10)*(8000000/4000.0))
      +                          ); return 4;}
   834  007E1C  B881               	btfsc	129,4,c	;volatile
   835  007E1E  EF13  F03F         	goto	u51
   836  007E22  EF15  F03F         	goto	u50
   837  007E26                     u51:
   838  007E26  EF20  F03F         	goto	l95
   839  007E2A                     u50:
   840  007E2A  0E1A               	movlw	26
   841  007E2C  6E01               	movwf	??_key_scanner^0,c
   842  007E2E  0EF8               	movlw	248
   843  007E30                     u607:
   844  007E30  2EE8               	decfsz	wreg,f,c
   845  007E32  D7FE               	bra	u607
   846  007E34  2E01               	decfsz	??_key_scanner^0,f,c
   847  007E36  D7FC               	bra	u607
   848  007E38  D000               	nop2	
   849  007E3A  0E04               	movlw	4
   850  007E3C  EFFF  F03F         	goto	l88
   851  007E40                     l95:
   852  007E40  BA81               	btfsc	129,5,c	;volatile
   853  007E42  EF25  F03F         	goto	u61
   854  007E46  EF27  F03F         	goto	u60
   855  007E4A                     u61:
   856  007E4A  EF32  F03F         	goto	l97
   857  007E4E                     u60:
   858  007E4E  0E1A               	movlw	26
   859  007E50  6E01               	movwf	??_key_scanner^0,c
   860  007E52  0EF8               	movlw	248
   861  007E54                     u617:
   862  007E54  2EE8               	decfsz	wreg,f,c
   863  007E56  D7FE               	bra	u617
   864  007E58  2E01               	decfsz	??_key_scanner^0,f,c
   865  007E5A  D7FC               	bra	u617
   866  007E5C  D000               	nop2	
   867  007E5E  0E05               	movlw	5
   868  007E60  EFFF  F03F         	goto	l88
   869  007E64                     l97:
   870  007E64  BC81               	btfsc	129,6,c	;volatile
   871  007E66  EF37  F03F         	goto	u71
   872  007E6A  EF39  F03F         	goto	u70
   873  007E6E                     u71:
   874  007E6E  EF44  F03F         	goto	l99
   875  007E72                     u70:
   876  007E72  0E1A               	movlw	26
   877  007E74  6E01               	movwf	??_key_scanner^0,c
   878  007E76  0EF8               	movlw	248
   879  007E78                     u627:
   880  007E78  2EE8               	decfsz	wreg,f,c
   881  007E7A  D7FE               	bra	u627
   882  007E7C  2E01               	decfsz	??_key_scanner^0,f,c
   883  007E7E  D7FC               	bra	u627
   884  007E80  D000               	nop2	
   885  007E82  0E06               	movlw	6
   886  007E84  EFFF  F03F         	goto	l88
   887  007E88                     l99:
   888  007E88  BE81               	btfsc	129,7,c	;volatile
   889  007E8A  EF49  F03F         	goto	u81
   890  007E8E  EF4B  F03F         	goto	u80
   891  007E92                     u81:
   892  007E92  EF56  F03F         	goto	l96
   893  007E96                     u80:
   894  007E96  0E1A               	movlw	26
   895  007E98  6E01               	movwf	??_key_scanner^0,c
   896  007E9A  0EF8               	movlw	248
   897  007E9C                     u637:
   898  007E9C  2EE8               	decfsz	wreg,f,c
   899  007E9E  D7FE               	bra	u637
   900  007EA0  2E01               	decfsz	??_key_scanner^0,f,c
   901  007EA2  D7FC               	bra	u637
   902  007EA4  D000               	nop2	
   903  007EA6  0E0B               	movlw	11
   904  007EA8  EFFF  F03F         	goto	l88
   905  007EAC                     l96:
   906                           
   907                           ;main.c: 159:     LATBbits.LB0 = 1;
   908  007EAC  808A               	bsf	138,0,c	;volatile
   909                           
   910                           ;main.c: 160:     LATBbits.LB1 = 1;
   911  007EAE  828A               	bsf	138,1,c	;volatile
   912                           
   913                           ;main.c: 161:     LATBbits.LB2 = 0;
   914  007EB0  948A               	bcf	138,2,c	;volatile
   915                           
   916                           ;main.c: 162:     LATBbits.LB3 = 1;
   917  007EB2  868A               	bsf	138,3,c	;volatile
   918  007EB4                     
   919                           ;main.c: 163:     _delay((unsigned long)((10)*(8000000/4000.0)));
   920  007EB4  0E1A               	movlw	26
   921  007EB6  6E01               	movwf	??_key_scanner^0,c
   922  007EB8  0EF8               	movlw	248
   923  007EBA                     u647:
   924  007EBA  2EE8               	decfsz	wreg,f,c
   925  007EBC  D7FE               	bra	u647
   926  007EBE  2E01               	decfsz	??_key_scanner^0,f,c
   927  007EC0  D7FC               	bra	u647
   928  007EC2  D000               	nop2	
   929  007EC4                     
   930                           ;main.c: 164:     if (PORTBbits.RB4 == 0) {_delay((unsigned long)((10)*(8000000/4000.0))
      +                          ); return 7;}
   931  007EC4  B881               	btfsc	129,4,c	;volatile
   932  007EC6  EF67  F03F         	goto	u91
   933  007ECA  EF69  F03F         	goto	u90
   934  007ECE                     u91:
   935  007ECE  EF74  F03F         	goto	l102
   936  007ED2                     u90:
   937  007ED2  0E1A               	movlw	26
   938  007ED4  6E01               	movwf	??_key_scanner^0,c
   939  007ED6  0EF8               	movlw	248
   940  007ED8                     u657:
   941  007ED8  2EE8               	decfsz	wreg,f,c
   942  007EDA  D7FE               	bra	u657
   943  007EDC  2E01               	decfsz	??_key_scanner^0,f,c
   944  007EDE  D7FC               	bra	u657
   945  007EE0  D000               	nop2	
   946  007EE2  0E07               	movlw	7
   947  007EE4  EFFF  F03F         	goto	l88
   948  007EE8                     l102:
   949  007EE8  BA81               	btfsc	129,5,c	;volatile
   950  007EEA  EF79  F03F         	goto	u101
   951  007EEE  EF7B  F03F         	goto	u100
   952  007EF2                     u101:
   953  007EF2  EF86  F03F         	goto	l104
   954  007EF6                     u100:
   955  007EF6  0E1A               	movlw	26
   956  007EF8  6E01               	movwf	??_key_scanner^0,c
   957  007EFA  0EF8               	movlw	248
   958  007EFC                     u667:
   959  007EFC  2EE8               	decfsz	wreg,f,c
   960  007EFE  D7FE               	bra	u667
   961  007F00  2E01               	decfsz	??_key_scanner^0,f,c
   962  007F02  D7FC               	bra	u667
   963  007F04  D000               	nop2	
   964  007F06  0E08               	movlw	8
   965  007F08  EFFF  F03F         	goto	l88
   966  007F0C                     l104:
   967  007F0C  BC81               	btfsc	129,6,c	;volatile
   968  007F0E  EF8B  F03F         	goto	u111
   969  007F12  EF8D  F03F         	goto	u110
   970  007F16                     u111:
   971  007F16  EF98  F03F         	goto	l106
   972  007F1A                     u110:
   973  007F1A  0E1A               	movlw	26
   974  007F1C  6E01               	movwf	??_key_scanner^0,c
   975  007F1E  0EF8               	movlw	248
   976  007F20                     u677:
   977  007F20  2EE8               	decfsz	wreg,f,c
   978  007F22  D7FE               	bra	u677
   979  007F24  2E01               	decfsz	??_key_scanner^0,f,c
   980  007F26  D7FC               	bra	u677
   981  007F28  D000               	nop2	
   982  007F2A  0E09               	movlw	9
   983  007F2C  EFFF  F03F         	goto	l88
   984  007F30                     l106:
   985  007F30  BE81               	btfsc	129,7,c	;volatile
   986  007F32  EF9D  F03F         	goto	u121
   987  007F36  EF9F  F03F         	goto	u120
   988  007F3A                     u121:
   989  007F3A  EFAA  F03F         	goto	l103
   990  007F3E                     u120:
   991  007F3E  0E1A               	movlw	26
   992  007F40  6E01               	movwf	??_key_scanner^0,c
   993  007F42  0EF8               	movlw	248
   994  007F44                     u687:
   995  007F44  2EE8               	decfsz	wreg,f,c
   996  007F46  D7FE               	bra	u687
   997  007F48  2E01               	decfsz	??_key_scanner^0,f,c
   998  007F4A  D7FC               	bra	u687
   999  007F4C  D000               	nop2	
  1000  007F4E  0E0C               	movlw	12
  1001  007F50  EFFF  F03F         	goto	l88
  1002  007F54                     l103:
  1003                           
  1004                           ;main.c: 168:     LATBbits.LB0 = 1;
  1005  007F54  808A               	bsf	138,0,c	;volatile
  1006                           
  1007                           ;main.c: 169:     LATBbits.LB1 = 1;
  1008  007F56  828A               	bsf	138,1,c	;volatile
  1009                           
  1010                           ;main.c: 170:     LATBbits.LB2 = 1;
  1011  007F58  848A               	bsf	138,2,c	;volatile
  1012                           
  1013                           ;main.c: 171:     LATBbits.LB3 = 0;
  1014  007F5A  968A               	bcf	138,3,c	;volatile
  1015  007F5C                     
  1016                           ;main.c: 172:     _delay((unsigned long)((10)*(8000000/4000.0)));
  1017  007F5C  0E1A               	movlw	26
  1018  007F5E  6E01               	movwf	??_key_scanner^0,c
  1019  007F60  0EF8               	movlw	248
  1020  007F62                     u697:
  1021  007F62  2EE8               	decfsz	wreg,f,c
  1022  007F64  D7FE               	bra	u697
  1023  007F66  2E01               	decfsz	??_key_scanner^0,f,c
  1024  007F68  D7FC               	bra	u697
  1025  007F6A  D000               	nop2	
  1026  007F6C                     
  1027                           ;main.c: 173:     if (PORTBbits.RB4 == 0) {_delay((unsigned long)((10)*(8000000/4000.0))
      +                          ); return 14;}
  1028  007F6C  B881               	btfsc	129,4,c	;volatile
  1029  007F6E  EFBB  F03F         	goto	u131
  1030  007F72  EFBD  F03F         	goto	u130
  1031  007F76                     u131:
  1032  007F76  EFC8  F03F         	goto	l109
  1033  007F7A                     u130:
  1034  007F7A  0E1A               	movlw	26
  1035  007F7C  6E01               	movwf	??_key_scanner^0,c
  1036  007F7E  0EF8               	movlw	248
  1037  007F80                     u707:
  1038  007F80  2EE8               	decfsz	wreg,f,c
  1039  007F82  D7FE               	bra	u707
  1040  007F84  2E01               	decfsz	??_key_scanner^0,f,c
  1041  007F86  D7FC               	bra	u707
  1042  007F88  D000               	nop2	
  1043  007F8A  0E0E               	movlw	14
  1044  007F8C  EFFF  F03F         	goto	l88
  1045  007F90                     l109:
  1046  007F90  BA81               	btfsc	129,5,c	;volatile
  1047  007F92  EFCD  F03F         	goto	u141
  1048  007F96  EFCF  F03F         	goto	u140
  1049  007F9A                     u141:
  1050  007F9A  EFDA  F03F         	goto	l111
  1051  007F9E                     u140:
  1052  007F9E  0E1A               	movlw	26
  1053  007FA0  6E01               	movwf	??_key_scanner^0,c
  1054  007FA2  0EF8               	movlw	248
  1055  007FA4                     u717:
  1056  007FA4  2EE8               	decfsz	wreg,f,c
  1057  007FA6  D7FE               	bra	u717
  1058  007FA8  2E01               	decfsz	??_key_scanner^0,f,c
  1059  007FAA  D7FC               	bra	u717
  1060  007FAC  D000               	nop2	
  1061  007FAE  0E00               	movlw	0
  1062  007FB0  EFFF  F03F         	goto	l88
  1063  007FB4                     l111:
  1064  007FB4  BC81               	btfsc	129,6,c	;volatile
  1065  007FB6  EFDF  F03F         	goto	u151
  1066  007FBA  EFE1  F03F         	goto	u150
  1067  007FBE                     u151:
  1068  007FBE  EFEC  F03F         	goto	l113
  1069  007FC2                     u150:
  1070  007FC2  0E1A               	movlw	26
  1071  007FC4  6E01               	movwf	??_key_scanner^0,c
  1072  007FC6  0EF8               	movlw	248
  1073  007FC8                     u727:
  1074  007FC8  2EE8               	decfsz	wreg,f,c
  1075  007FCA  D7FE               	bra	u727
  1076  007FCC  2E01               	decfsz	??_key_scanner^0,f,c
  1077  007FCE  D7FC               	bra	u727
  1078  007FD0  D000               	nop2	
  1079  007FD2  0E0F               	movlw	15
  1080  007FD4  EFFF  F03F         	goto	l88
  1081  007FD8                     l113:
  1082  007FD8  BE81               	btfsc	129,7,c	;volatile
  1083  007FDA  EFF1  F03F         	goto	u161
  1084  007FDE  EFF3  F03F         	goto	u160
  1085  007FE2                     u161:
  1086  007FE2  EFFE  F03F         	goto	l947
  1087  007FE6                     u160:
  1088  007FE6  0E1A               	movlw	26
  1089  007FE8  6E01               	movwf	??_key_scanner^0,c
  1090  007FEA  0EF8               	movlw	248
  1091  007FEC                     u737:
  1092  007FEC  2EE8               	decfsz	wreg,f,c
  1093  007FEE  D7FE               	bra	u737
  1094  007FF0  2E01               	decfsz	??_key_scanner^0,f,c
  1095  007FF2  D7FC               	bra	u737
  1096  007FF4  D000               	nop2	
  1097  007FF6  0E0D               	movlw	13
  1098  007FF8  EFFF  F03F         	goto	l88
  1099  007FFC                     l947:
  1100  007FFC  0E78               	movlw	120
  1101  007FFE                     l88:
  1102  007FFE  0012               	return		;funcret
  1103  008000                     __end_of_key_scanner:
  1104                           	callstack 0
  1105                           
  1106 ;; *************** function _char_to_seg *****************
  1107 ;; Defined at:
  1108 ;;		line 181 in file "main.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  num             1    wreg     unsigned char 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  num             1    2[COMRAM] unsigned char 
  1113 ;;  segments        1    3[COMRAM] unsigned char 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      unsigned char 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1123 ;;      Params:         0       0       0       0       0       0       0       0       0
  1124 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1125 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1126 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1127 ;;Total ram usage:        4 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text3
  1137  007A12                     __ptext3:
  1138                           	callstack 0
  1139  007A12                     _char_to_seg:
  1140                           	callstack 30
  1141                           
  1142                           ;incstack = 0
  1143                           ;char_to_seg@num stored from wreg
  1144  007A12  6E03               	movwf	char_to_seg@num^0,c
  1145  007A14                     
  1146                           ;main.c: 182:     uint8_t segments;;main.c: 183:     switch(num){
  1147  007A14  EF44  F03D         	goto	l983
  1148  007A18                     l953:
  1149  007A18  0E30               	movlw	48
  1150  007A1A  6E04               	movwf	char_to_seg@segments^0,c
  1151  007A1C  EF89  F03D         	goto	l985
  1152  007A20                     l955:
  1153  007A20  0E31               	movlw	49
  1154  007A22  6E04               	movwf	char_to_seg@segments^0,c
  1155  007A24  EF89  F03D         	goto	l985
  1156  007A28                     l957:
  1157  007A28  0E32               	movlw	50
  1158  007A2A  6E04               	movwf	char_to_seg@segments^0,c
  1159  007A2C  EF89  F03D         	goto	l985
  1160  007A30                     l959:
  1161  007A30  0E33               	movlw	51
  1162  007A32  6E04               	movwf	char_to_seg@segments^0,c
  1163  007A34  EF89  F03D         	goto	l985
  1164  007A38                     l961:
  1165  007A38  0E34               	movlw	52
  1166  007A3A  6E04               	movwf	char_to_seg@segments^0,c
  1167  007A3C  EF89  F03D         	goto	l985
  1168  007A40                     l963:
  1169  007A40  0E35               	movlw	53
  1170  007A42  6E04               	movwf	char_to_seg@segments^0,c
  1171  007A44  EF89  F03D         	goto	l985
  1172  007A48                     l965:
  1173  007A48  0E36               	movlw	54
  1174  007A4A  6E04               	movwf	char_to_seg@segments^0,c
  1175  007A4C  EF89  F03D         	goto	l985
  1176  007A50                     l967:
  1177  007A50  0E37               	movlw	55
  1178  007A52  6E04               	movwf	char_to_seg@segments^0,c
  1179  007A54  EF89  F03D         	goto	l985
  1180  007A58                     l969:
  1181  007A58  0E38               	movlw	56
  1182  007A5A  6E04               	movwf	char_to_seg@segments^0,c
  1183  007A5C  EF89  F03D         	goto	l985
  1184  007A60                     l971:
  1185  007A60  0E39               	movlw	57
  1186  007A62  6E04               	movwf	char_to_seg@segments^0,c
  1187  007A64  EF89  F03D         	goto	l985
  1188  007A68                     l973:
  1189  007A68  0E2B               	movlw	43
  1190  007A6A  6E04               	movwf	char_to_seg@segments^0,c
  1191  007A6C  EF89  F03D         	goto	l985
  1192  007A70                     l975:
  1193  007A70  0E2D               	movlw	45
  1194  007A72  6E04               	movwf	char_to_seg@segments^0,c
  1195  007A74  EF89  F03D         	goto	l985
  1196  007A78                     l977:
  1197  007A78  0E2A               	movlw	42
  1198  007A7A  6E04               	movwf	char_to_seg@segments^0,c
  1199  007A7C  EF89  F03D         	goto	l985
  1200  007A80                     l979:
  1201  007A80  0E2F               	movlw	47
  1202  007A82  6E04               	movwf	char_to_seg@segments^0,c
  1203  007A84  EF89  F03D         	goto	l985
  1204  007A88                     l983:
  1205  007A88  5003               	movf	char_to_seg@num^0,w,c
  1206  007A8A  6E01               	movwf	??_char_to_seg^0,c
  1207  007A8C  6A02               	clrf	(??_char_to_seg+1)^0,c
  1208                           
  1209                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1210                           ; Switch size 1, requested type "simple"
  1211                           ; Number of cases is 1, Range of values is 0 to 0
  1212                           ; switch strategies available:
  1213                           ; Name         Instructions Cycles
  1214                           ; simple_byte            4     3 (average)
  1215                           ;	Chosen strategy is simple_byte
  1216  007A8E  5002               	movf	(??_char_to_seg+1)^0,w,c
  1217  007A90  0A00               	xorlw	0	; case 0
  1218  007A92  B4D8               	btfsc	status,2,c
  1219  007A94  EF4E  F03D         	goto	l1305
  1220  007A98  EF89  F03D         	goto	l985
  1221  007A9C                     l1305:
  1222                           
  1223                           ; Switch size 1, requested type "simple"
  1224                           ; Number of cases is 14, Range of values is 0 to 13
  1225                           ; switch strategies available:
  1226                           ; Name         Instructions Cycles
  1227                           ; simple_byte           43    22 (average)
  1228                           ;	Chosen strategy is simple_byte
  1229  007A9C  5001               	movf	??_char_to_seg^0,w,c
  1230  007A9E  0A00               	xorlw	0	; case 0
  1231  007AA0  B4D8               	btfsc	status,2,c
  1232  007AA2  EF0C  F03D         	goto	l953
  1233  007AA6  0A01               	xorlw	1	; case 1
  1234  007AA8  B4D8               	btfsc	status,2,c
  1235  007AAA  EF10  F03D         	goto	l955
  1236  007AAE  0A03               	xorlw	3	; case 2
  1237  007AB0  B4D8               	btfsc	status,2,c
  1238  007AB2  EF14  F03D         	goto	l957
  1239  007AB6  0A01               	xorlw	1	; case 3
  1240  007AB8  B4D8               	btfsc	status,2,c
  1241  007ABA  EF18  F03D         	goto	l959
  1242  007ABE  0A07               	xorlw	7	; case 4
  1243  007AC0  B4D8               	btfsc	status,2,c
  1244  007AC2  EF1C  F03D         	goto	l961
  1245  007AC6  0A01               	xorlw	1	; case 5
  1246  007AC8  B4D8               	btfsc	status,2,c
  1247  007ACA  EF20  F03D         	goto	l963
  1248  007ACE  0A03               	xorlw	3	; case 6
  1249  007AD0  B4D8               	btfsc	status,2,c
  1250  007AD2  EF24  F03D         	goto	l965
  1251  007AD6  0A01               	xorlw	1	; case 7
  1252  007AD8  B4D8               	btfsc	status,2,c
  1253  007ADA  EF28  F03D         	goto	l967
  1254  007ADE  0A0F               	xorlw	15	; case 8
  1255  007AE0  B4D8               	btfsc	status,2,c
  1256  007AE2  EF2C  F03D         	goto	l969
  1257  007AE6  0A01               	xorlw	1	; case 9
  1258  007AE8  B4D8               	btfsc	status,2,c
  1259  007AEA  EF30  F03D         	goto	l971
  1260  007AEE  0A03               	xorlw	3	; case 10
  1261  007AF0  B4D8               	btfsc	status,2,c
  1262  007AF2  EF34  F03D         	goto	l973
  1263  007AF6  0A01               	xorlw	1	; case 11
  1264  007AF8  B4D8               	btfsc	status,2,c
  1265  007AFA  EF38  F03D         	goto	l975
  1266  007AFE  0A07               	xorlw	7	; case 12
  1267  007B00  B4D8               	btfsc	status,2,c
  1268  007B02  EF3C  F03D         	goto	l977
  1269  007B06  0A01               	xorlw	1	; case 13
  1270  007B08  B4D8               	btfsc	status,2,c
  1271  007B0A  EF40  F03D         	goto	l979
  1272  007B0E  EF89  F03D         	goto	l985
  1273  007B12                     l985:
  1274                           
  1275                           ;main.c: 201:     return segments;
  1276  007B12  5004               	movf	char_to_seg@segments^0,w,c
  1277  007B14  0012               	return		;funcret
  1278  007B16                     __end_of_char_to_seg:
  1279                           	callstack 0
  1280                           
  1281 ;; *************** function ___awdiv *****************
  1282 ;; Defined at:
  1283 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  dividend        2    0[COMRAM] int 
  1286 ;;  divisor         2    2[COMRAM] int 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  quotient        2    6[COMRAM] int 
  1289 ;;  sign            1    5[COMRAM] unsigned char 
  1290 ;;  counter         1    4[COMRAM] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  2    0[COMRAM] int 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1300 ;;      Params:         4       0       0       0       0       0       0       0       0
  1301 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1303 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1304 ;;Total ram usage:        8 bytes
  1305 ;; Hardware stack levels used: 1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_main
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text4
  1314  00794E                     __ptext4:
  1315                           	callstack 0
  1316  00794E                     ___awdiv:
  1317                           	callstack 30
  1318  00794E  0E00               	movlw	0
  1319  007950  6E06               	movwf	___awdiv@sign^0,c
  1320  007952  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1321  007954  EFB0  F03C         	goto	u330
  1322  007958  EFAE  F03C         	goto	u331
  1323  00795C                     u331:
  1324  00795C  EFB6  F03C         	goto	l1167
  1325  007960                     u330:
  1326  007960  6C03               	negf	___awdiv@divisor^0,c
  1327  007962  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1328  007964  B0D8               	btfsc	status,0,c
  1329  007966  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1330  007968  0E01               	movlw	1
  1331  00796A  6E06               	movwf	___awdiv@sign^0,c
  1332  00796C                     l1167:
  1333  00796C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1334  00796E  EFBD  F03C         	goto	u340
  1335  007972  EFBB  F03C         	goto	u341
  1336  007976                     u341:
  1337  007976  EFC3  F03C         	goto	l1173
  1338  00797A                     u340:
  1339  00797A  6C01               	negf	___awdiv@dividend^0,c
  1340  00797C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1341  00797E  B0D8               	btfsc	status,0,c
  1342  007980  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1343  007982  0E01               	movlw	1
  1344  007984  1A06               	xorwf	___awdiv@sign^0,f,c
  1345  007986                     l1173:
  1346  007986  0E00               	movlw	0
  1347  007988  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1348  00798A  0E00               	movlw	0
  1349  00798C  6E07               	movwf	___awdiv@quotient^0,c
  1350  00798E  5003               	movf	___awdiv@divisor^0,w,c
  1351  007990  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1352  007992  B4D8               	btfsc	status,2,c
  1353  007994  EFCE  F03C         	goto	u351
  1354  007998  EFD0  F03C         	goto	u350
  1355  00799C                     u351:
  1356  00799C  EFF8  F03C         	goto	l1195
  1357  0079A0                     u350:
  1358  0079A0  0E01               	movlw	1
  1359  0079A2  6E05               	movwf	___awdiv@counter^0,c
  1360  0079A4  EFD8  F03C         	goto	l1181
  1361  0079A8                     l1179:
  1362  0079A8  90D8               	bcf	status,0,c
  1363  0079AA  3603               	rlcf	___awdiv@divisor^0,f,c
  1364  0079AC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1365  0079AE  2A05               	incf	___awdiv@counter^0,f,c
  1366  0079B0                     l1181:
  1367  0079B0  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1368  0079B2  EFDD  F03C         	goto	u361
  1369  0079B6  EFDF  F03C         	goto	u360
  1370  0079BA                     u361:
  1371  0079BA  EFD4  F03C         	goto	l1179
  1372  0079BE                     u360:
  1373  0079BE                     l1183:
  1374  0079BE  90D8               	bcf	status,0,c
  1375  0079C0  3607               	rlcf	___awdiv@quotient^0,f,c
  1376  0079C2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1377  0079C4  5003               	movf	___awdiv@divisor^0,w,c
  1378  0079C6  5C01               	subwf	___awdiv@dividend^0,w,c
  1379  0079C8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1380  0079CA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1381  0079CC  A0D8               	btfss	status,0,c
  1382  0079CE  EFEB  F03C         	goto	u371
  1383  0079D2  EFED  F03C         	goto	u370
  1384  0079D6                     u371:
  1385  0079D6  EFF2  F03C         	goto	l1191
  1386  0079DA                     u370:
  1387  0079DA  5003               	movf	___awdiv@divisor^0,w,c
  1388  0079DC  5E01               	subwf	___awdiv@dividend^0,f,c
  1389  0079DE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1390  0079E0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1391  0079E2  8007               	bsf	___awdiv@quotient^0,0,c
  1392  0079E4                     l1191:
  1393  0079E4  90D8               	bcf	status,0,c
  1394  0079E6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1395  0079E8  3203               	rrcf	___awdiv@divisor^0,f,c
  1396  0079EA  2E05               	decfsz	___awdiv@counter^0,f,c
  1397  0079EC  EFDF  F03C         	goto	l1183
  1398  0079F0                     l1195:
  1399  0079F0  5006               	movf	___awdiv@sign^0,w,c
  1400  0079F2  B4D8               	btfsc	status,2,c
  1401  0079F4  EFFE  F03C         	goto	u381
  1402  0079F8  EF00  F03D         	goto	u380
  1403  0079FC                     u381:
  1404  0079FC  EF04  F03D         	goto	l1199
  1405  007A00                     u380:
  1406  007A00  6C07               	negf	___awdiv@quotient^0,c
  1407  007A02  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1408  007A04  B0D8               	btfsc	status,0,c
  1409  007A06  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1410  007A08                     l1199:
  1411  007A08  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1412  007A0C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1413  007A10  0012               	return		;funcret
  1414  007A12                     __end_of___awdiv:
  1415                           	callstack 0
  1416                           
  1417 ;; *************** function _LCD_init *****************
  1418 ;; Defined at:
  1419 ;;		line 99 in file "main.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;		None
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:         0       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1435 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1436 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1437 ;;Total ram usage:        2 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; Hardware stack levels required when called: 1
  1440 ;; This function calls:
  1441 ;;		_LCD_cmd
  1442 ;; This function is called by:
  1443 ;;		_main
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text5
  1448  0078EE                     __ptext5:
  1449                           	callstack 0
  1450  0078EE                     _LCD_init:
  1451                           	callstack 29
  1452  0078EE                     
  1453                           ;main.c: 100:     LATC = 0;
  1454  0078EE  0E00               	movlw	0
  1455  0078F0  6E8B               	movwf	139,c	;volatile
  1456  0078F2                     
  1457                           ;main.c: 101:     TRISCbits.TRISC0 = 0;
  1458  0078F2  9094               	bcf	148,0,c	;volatile
  1459  0078F4                     
  1460                           ;main.c: 102:     TRISCbits.TRISC2 = 0;
  1461  0078F4  9494               	bcf	148,2,c	;volatile
  1462  0078F6                     
  1463                           ;main.c: 103:     TRISCbits.TRISC1 = 0;
  1464  0078F6  9294               	bcf	148,1,c	;volatile
  1465  0078F8                     
  1466                           ;main.c: 104:     LCD_cmd(0x38);
  1467  0078F8  0E38               	movlw	56
  1468  0078FA  EC58  F03C         	call	_LCD_cmd
  1469  0078FE                     
  1470                           ;main.c: 105:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1471  0078FE  0E03               	movlw	3
  1472  007900  6E03               	movwf	(??_LCD_init+1)^0,c
  1473  007902  0E8A               	movlw	138
  1474  007904  6E02               	movwf	??_LCD_init^0,c
  1475  007906  0E56               	movlw	86
  1476  007908                     u747:
  1477  007908  2EE8               	decfsz	wreg,f,c
  1478  00790A  D7FE               	bra	u747
  1479  00790C  2E02               	decfsz	??_LCD_init^0,f,c
  1480  00790E  D7FC               	bra	u747
  1481  007910  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  1482  007912  D7FA               	bra	u747
  1483  007914                     
  1484                           ;main.c: 106:     LCD_cmd(0x0F);
  1485  007914  0E0F               	movlw	15
  1486  007916  EC58  F03C         	call	_LCD_cmd
  1487  00791A                     
  1488                           ;main.c: 107:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1489  00791A  0E03               	movlw	3
  1490  00791C  6E03               	movwf	(??_LCD_init+1)^0,c
  1491  00791E  0E8A               	movlw	138
  1492  007920  6E02               	movwf	??_LCD_init^0,c
  1493  007922  0E56               	movlw	86
  1494  007924                     u757:
  1495  007924  2EE8               	decfsz	wreg,f,c
  1496  007926  D7FE               	bra	u757
  1497  007928  2E02               	decfsz	??_LCD_init^0,f,c
  1498  00792A  D7FC               	bra	u757
  1499  00792C  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  1500  00792E  D7FA               	bra	u757
  1501  007930                     
  1502                           ;main.c: 108:     LCD_cmd(0x01);
  1503  007930  0E01               	movlw	1
  1504  007932  EC58  F03C         	call	_LCD_cmd
  1505  007936                     
  1506                           ;main.c: 109:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1507  007936  0E03               	movlw	3
  1508  007938  6E03               	movwf	(??_LCD_init+1)^0,c
  1509  00793A  0E8A               	movlw	138
  1510  00793C  6E02               	movwf	??_LCD_init^0,c
  1511  00793E  0E56               	movlw	86
  1512  007940                     u767:
  1513  007940  2EE8               	decfsz	wreg,f,c
  1514  007942  D7FE               	bra	u767
  1515  007944  2E02               	decfsz	??_LCD_init^0,f,c
  1516  007946  D7FC               	bra	u767
  1517  007948  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  1518  00794A  D7FA               	bra	u767
  1519  00794C  0012               	return		;funcret
  1520  00794E                     __end_of_LCD_init:
  1521                           	callstack 0
  1522                           
  1523 ;; *************** function _LCD_cmd *****************
  1524 ;; Defined at:
  1525 ;;		line 128 in file "main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;  cx              1    wreg     unsigned char 
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  cx              1    0[COMRAM] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      void 
  1532 ;; Registers used:
  1533 ;;		wreg
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1539 ;;      Params:         0       0       0       0       0       0       0       0       0
  1540 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1542 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1543 ;;Total ram usage:        1 bytes
  1544 ;; Hardware stack levels used: 1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_LCD_init
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text6
  1553  0078B0                     __ptext6:
  1554                           	callstack 0
  1555  0078B0                     _LCD_cmd:
  1556                           	callstack 29
  1557                           
  1558                           ;incstack = 0
  1559                           ;LCD_cmd@cx stored from wreg
  1560  0078B0  6E01               	movwf	LCD_cmd@cx^0,c
  1561  0078B2                     
  1562                           ;main.c: 130:     LATCbits.LATC2 = 0;
  1563  0078B2  948B               	bcf	139,2,c	;volatile
  1564                           
  1565                           ;main.c: 131:     LATCbits.LATC1 = 0;
  1566  0078B4  928B               	bcf	139,1,c	;volatile
  1567                           
  1568                           ;main.c: 132:     LATCbits.LATC0 = 1;
  1569  0078B6  808B               	bsf	139,0,c	;volatile
  1570                           
  1571                           ;main.c: 133:     __nop();
  1572  0078B8  F000               	nop	
  1573  0078BA                     
  1574                           ;main.c: 134:     LATD = cx;
  1575  0078BA  C001  FF8C         	movff	LCD_cmd@cx,3980	;volatile
  1576  0078BE                     
  1577                           ;main.c: 135:     __nop();
  1578  0078BE  F000               	nop	
  1579  0078C0                     
  1580                           ;main.c: 136:     LATCbits.LATC0 = 0;
  1581  0078C0  908B               	bcf	139,0,c	;volatile
  1582  0078C2  0012               	return		;funcret
  1583  0078C4                     __end_of_LCD_cmd:
  1584                           	callstack 0
  1585  0000                     
  1586                           	psect	rparam
  1587  0000                     
  1588                           	psect	idloc
  1589                           
  1590                           ;Config register IDLOC0 @ 0x200000
  1591                           ;	unspecified, using default values
  1592  200000                     	org	2097152
  1593  200000  FF                 	db	255
  1594                           
  1595                           ;Config register IDLOC1 @ 0x200001
  1596                           ;	unspecified, using default values
  1597  200001                     	org	2097153
  1598  200001  FF                 	db	255
  1599                           
  1600                           ;Config register IDLOC2 @ 0x200002
  1601                           ;	unspecified, using default values
  1602  200002                     	org	2097154
  1603  200002  FF                 	db	255
  1604                           
  1605                           ;Config register IDLOC3 @ 0x200003
  1606                           ;	unspecified, using default values
  1607  200003                     	org	2097155
  1608  200003  FF                 	db	255
  1609                           
  1610                           ;Config register IDLOC4 @ 0x200004
  1611                           ;	unspecified, using default values
  1612  200004                     	org	2097156
  1613  200004  FF                 	db	255
  1614                           
  1615                           ;Config register IDLOC5 @ 0x200005
  1616                           ;	unspecified, using default values
  1617  200005                     	org	2097157
  1618  200005  FF                 	db	255
  1619                           
  1620                           ;Config register IDLOC6 @ 0x200006
  1621                           ;	unspecified, using default values
  1622  200006                     	org	2097158
  1623  200006  FF                 	db	255
  1624                           
  1625                           ;Config register IDLOC7 @ 0x200007
  1626                           ;	unspecified, using default values
  1627  200007                     	org	2097159
  1628  200007  FF                 	db	255
  1629                           
  1630                           	psect	config
  1631                           
  1632                           ;Config register CONFIG1L @ 0x300000
  1633                           ;	PLL Selection
  1634                           ;	PLLSEL = PLL4X, 4x clock multiplier
  1635                           ;	PLL Enable Configuration bit
  1636                           ;	CFGPLLEN = ON, PLL Enabled
  1637                           ;	CPU System Clock Postscaler
  1638                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  1639                           ;	Low Speed USB mode with 48 MHz system clock
  1640                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  1641  300000                     	org	3145728
  1642  300000  02                 	db	2
  1643                           
  1644                           ;Config register CONFIG1H @ 0x300001
  1645                           ;	Oscillator Selection
  1646                           ;	FOSC = INTOSCIO, Internal oscillator
  1647                           ;	Primary Oscillator Shutdown
  1648                           ;	PCLKEN = ON, Primary oscillator enabled
  1649                           ;	Fail-Safe Clock Monitor
  1650                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1651                           ;	Internal/External Oscillator Switchover
  1652                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1653  300001                     	org	3145729
  1654  300001  28                 	db	40
  1655                           
  1656                           ;Config register CONFIG2L @ 0x300002
  1657                           ;	Power-up Timer Enable
  1658                           ;	nPWRTEN = OFF, Power up timer disabled
  1659                           ;	Brown-out Reset Enable
  1660                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  1661                           ;	Brown-out Reset Voltage
  1662                           ;	BORV = 190, BOR set to 1.9V nominal
  1663                           ;	Low-Power Brown-out Reset
  1664                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  1665  300002                     	org	3145730
  1666  300002  5F                 	db	95
  1667                           
  1668                           ;Config register CONFIG2H @ 0x300003
  1669                           ;	Watchdog Timer Enable bits
  1670                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  1671                           ;	Watchdog Timer Postscaler
  1672                           ;	WDTPS = 32768, 1:32768
  1673  300003                     	org	3145731
  1674  300003  3C                 	db	60
  1675                           
  1676                           ; Padding undefined space
  1677  300004                     	org	3145732
  1678  300004  FF                 	db	255
  1679                           
  1680                           ;Config register CONFIG3H @ 0x300005
  1681                           ;	CCP2 MUX bit
  1682                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  1683                           ;	PORTB A/D Enable bit
  1684                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1685                           ;	Timer3 Clock Input MUX bit
  1686                           ;	T3CMX = RC0, T3CKI function is on RC0
  1687                           ;	SDO Output MUX bit
  1688                           ;	SDOMX = RB3, SDO function is on RB3
  1689                           ;	Master Clear Reset Pin Enable
  1690                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  1691  300005                     	org	3145733
  1692  300005  D1                 	db	209
  1693                           
  1694                           ;Config register CONFIG4L @ 0x300006
  1695                           ;	Stack Full/Underflow Reset
  1696                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1697                           ;	Single-Supply ICSP Enable bit
  1698                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  1699                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  1700                           ;	ICPRT = OFF, ICPORT disabled
  1701                           ;	Extended Instruction Set Enable bit
  1702                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  1703                           ;	Background Debugger Enable bit
  1704                           ;	DEBUG = 0x1, unprogrammed default
  1705  300006                     	org	3145734
  1706  300006  85                 	db	133
  1707                           
  1708                           ; Padding undefined space
  1709  300007                     	org	3145735
  1710  300007  FF                 	db	255
  1711                           
  1712                           ;Config register CONFIG5L @ 0x300008
  1713                           ;	Block 0 Code Protect
  1714                           ;	CP0 = OFF, Block 0 is not code-protected
  1715                           ;	Block 1 Code Protect
  1716                           ;	CP1 = OFF, Block 1 is not code-protected
  1717                           ;	Block 2 Code Protect
  1718                           ;	CP2 = OFF, Block 2 is not code-protected
  1719                           ;	Block 3 Code Protect
  1720                           ;	CP3 = OFF, Block 3 is not code-protected
  1721  300008                     	org	3145736
  1722  300008  0F                 	db	15
  1723                           
  1724                           ;Config register CONFIG5H @ 0x300009
  1725                           ;	Boot Block Code Protect
  1726                           ;	CPB = OFF, Boot block is not code-protected
  1727                           ;	Data EEPROM Code Protect
  1728                           ;	CPD = OFF, Data EEPROM is not code-protected
  1729  300009                     	org	3145737
  1730  300009  C0                 	db	192
  1731                           
  1732                           ;Config register CONFIG6L @ 0x30000A
  1733                           ;	Block 0 Write Protect
  1734                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  1735                           ;	Block 1 Write Protect
  1736                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  1737                           ;	Block 2 Write Protect
  1738                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  1739                           ;	Block 3 Write Protect
  1740                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  1741  30000A                     	org	3145738
  1742  30000A  0F                 	db	15
  1743                           
  1744                           ;Config register CONFIG6H @ 0x30000B
  1745                           ;	Configuration Registers Write Protect
  1746                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1747                           ;	Boot Block Write Protect
  1748                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  1749                           ;	Data EEPROM Write Protect
  1750                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1751  30000B                     	org	3145739
  1752  30000B  E0                 	db	224
  1753                           
  1754                           ;Config register CONFIG7L @ 0x30000C
  1755                           ;	Block 0 Table Read Protect
  1756                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  1757                           ;	Block 1 Table Read Protect
  1758                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  1759                           ;	Block 2 Table Read Protect
  1760                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  1761                           ;	Block 3 Table Read Protect
  1762                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  1763  30000C                     	org	3145740
  1764  30000C  0F                 	db	15
  1765                           
  1766                           ;Config register CONFIG7H @ 0x30000D
  1767                           ;	Boot Block Table Read Protect
  1768                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  1769  30000D                     	org	3145741
  1770  30000D  40                 	db	64
  1771                           tosu	equ	0xFFF
  1772                           tosh	equ	0xFFE
  1773                           tosl	equ	0xFFD
  1774                           stkptr	equ	0xFFC
  1775                           pclatu	equ	0xFFB
  1776                           pclath	equ	0xFFA
  1777                           pcl	equ	0xFF9
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           indf0	equ	0xFEF
  1785                           postinc0	equ	0xFEE
  1786                           postdec0	equ	0xFED
  1787                           preinc0	equ	0xFEC
  1788                           plusw0	equ	0xFEB
  1789                           fsr0h	equ	0xFEA
  1790                           fsr0l	equ	0xFE9
  1791                           wreg	equ	0xFE8
  1792                           indf1	equ	0xFE7
  1793                           postinc1	equ	0xFE6
  1794                           postdec1	equ	0xFE5
  1795                           preinc1	equ	0xFE4
  1796                           plusw1	equ	0xFE3
  1797                           fsr1h	equ	0xFE2
  1798                           fsr1l	equ	0xFE1
  1799                           bsr	equ	0xFE0
  1800                           indf2	equ	0xFDF
  1801                           postinc2	equ	0xFDE
  1802                           postdec2	equ	0xFDD
  1803                           preinc2	equ	0xFDC
  1804                           plusw2	equ	0xFDB
  1805                           fsr2h	equ	0xFDA
  1806                           fsr2l	equ	0xFD9
  1807                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___awdiv
    _LCD_init->_LCD_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1127
                                              8 COMRAM     7     7      0
                           _LCD_init
                            ___awdiv
                        _char_to_seg
                        _key_scanner
                           _send2LCD
 ---------------------------------------------------------------------------------
 (1) _send2LCD                                             3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _key_scanner                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _char_to_seg                                          4     4      0      30
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      15
                                              1 COMRAM     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_cmd
   ___awdiv
   _char_to_seg
   _key_scanner
   _send2LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      F       F       1       15.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBIGSFRh          2C      0       0      20        0.0%
BITBIGSFRlhh        3D      0       0      21        0.0%
BITBIGSFRlhlh        6      0       0      22        0.0%
BITBIGSFRlhllh       6      0       0      23        0.0%
BITBIGSFRlhlllh      1      0       0      24        0.0%
BITBIGSFRlhllll     22      0       0      25        0.0%
BITBIGSFRll          9      0       0      26        0.0%
ABS                  0      0       0      27        0.0%
BIGRAM             7FF      0       0      28        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat May 07 22:11:51 2022

                     l62 7D08                       l72 78EC                       l90 7DBC  
                     l75 794C                       l84 78C2                       l92 7DE0  
                     l69 7D58                       l95 7E40                       l87 7D98  
                     l96 7EAC                       l88 7FFE                       l97 7E64  
                     l89 7E04                       l99 7E88                       u10 7D82  
                     u11 7D7E                       u20 7DA6                       u21 7DA2  
                     u30 7DCA                       u31 7DC6                       u40 7DEE  
                     u41 7DEA                       u50 7E2A                       u51 7E26  
                     u60 7E4E                       u61 7E4A                       u70 7E72  
                     u71 7E6E                       u80 7E96                       u81 7E92  
                     u90 7ED2                       u91 7ECE             ___awdiv@sign 0006  
                    l102 7EE8                      l111 7FB4                      l103 7F54  
                    l104 7F0C                      l113 7FD8                      l106 7F30  
                    l109 7F90                      l135 7B14                      l369 7A10  
                    l811 78B2                      l813 78BA                      l821 78F2  
                    l815 78BE                      l831 7914                      l823 78F4  
                    l903 7EF6                      l817 78C0                      l833 791A  
                    l825 78F6                      l921 7F6C                      l841 7D64  
                    l835 7930                      l827 78F8                      l819 78EE  
                    l923 7F7A                      l915 7F3E                      l851 7DA6  
                    l843 7D74                      l837 7936                      l829 78FE  
                    l941 7FE6                      l909 7F1A                      l845 7D82  
                    l951 7A14                      l935 7FC2                      l919 7F5C  
                    l871 7E2A                      l863 7DEE                      l839 7D5C  
                    l961 7A38                      l953 7A18                      l929 7F9E  
                    l857 7DCA                      l971 7A60                      l963 7A40  
                    l955 7A20                      l947 7FFC                      l883 7E72  
                    l867 7E0C                      l973 7A68                      l965 7A48  
                    l957 7A28                      l893 7EB4                      l877 7E4E  
                    l869 7E1C                      l975 7A70                      l967 7A50  
                    l959 7A30                      l983 7A88                      l895 7EC4  
                    l977 7A78                      l969 7A58                      l985 7B12  
                    l897 7ED2                      l889 7E96                      l993 78C6  
                    l979 7A80                      l995 78CC                      l997 78D0  
                    l999 78D2                      u100 7EF6                      u101 7EF2  
                    u110 7F1A                      u111 7F16                      u120 7F3E  
                    u121 7F3A                      u130 7F7A                      u131 7F76  
                    u140 7F9E                      u141 7F9A                      u150 7FC2  
                    u151 7FBE                      u160 7FE6                      u400 7BBA  
                    u161 7FE2                      u401 7BB6                      u330 7960  
                    u410 7C00                      u331 795C                      u411 7BFC  
                    u340 797A                      u420 7C4A                      u341 7976  
                    u421 7C46                      u350 79A0                      u430 7C62  
                    u351 799C                      u431 7C5E                      u360 79BE  
                    u440 7C88                      u361 79BA                      u441 7C84  
                    u370 79DA                      u450 7CAC                      u371 79D6  
                    u451 7CA8                      u507 7C20                      u380 7A00  
                    u460 7CDC                      u381 79FC                      u517 7D16  
                    u461 7CD8                      u470 7D40                      u390 7B70  
                    u607 7E30                      u527 7D4A                      u471 7D3C  
                    u391 7B6C                      u617 7E54                      u537 78E0  
                    u707 7F80                      u627 7E78                      u547 7D6A  
                    u717 7FA4                      u637 7E9C                      u557 7D88  
                    u727 7FC8                      u647 7EBA                      u567 7DAC  
                    u487 7B90                      u737 7FEC                      u657 7ED8  
                    u577 7DD0                      u497 7BD6                      u747 7908  
                    u667 7EFC                      u587 7DF4                      u757 7924  
                    u677 7F20                      u597 7E12                      u767 7940  
                    u687 7F44                      u697 7F62                      wreg 000FE8  
        __end_of_LCD_cmd 78C4                     l1001 78D4                     l1003 78D6  
                   l1211 7B3E                     l1203 7B16                     l1221 7B82  
                   l1213 7B42                     l1205 7B38                     l1231 7BC4  
                   l1223 7B86                     l1215 7B58                     l1207 7B3A  
                   l1161 7952                     l1305 7A9C                     l1241 7C00  
                   l1233 7BC8                     l1225 7BA2                     l1217 7B5E  
                   l1209 7B3C                     l1171 7982                     l1163 7960  
                   l1251 7C4A                     l1243 7C12                     l1235 7BCC  
                   l1227 7BA8                     l1219 7B70                     l1181 79B0  
                   l1173 7986                     l1165 7968                     l1261 7C88  
                   l1253 7C50                     l1245 7C16                     l1237 7BE8  
                   l1229 7BBA                     l1191 79E4                     l1183 79BE  
                   l1175 798E                     l1167 796C                     l1159 794E  
                   l1271 7CCA                     l1263 7C8E                     l1255 7C62  
                   l1247 7C32                     l1239 7BEE                     l1193 79EA  
                   l1185 79C4                     l1177 79A0                     l1169 797A  
                   l1281 7D2E                     l1273 7CDC                     l1265 7C9A  
                   l1257 7C6A                     l1249 7C38                     l1187 79DA  
                   l1179 79A8                     l1195 79F0                     l1283 7D40  
                   l1267 7CAC                     l1275 7D08                     l1259 7C76  
                   l1197 7A00                     l1189 79E2                     l1277 7D0C  
                   l1269 7CBE                     l1199 7A08                     l1279 7D28  
                   _LATC 000F8B                     _LATD 000F8C                     _main 7B16  
                   prodl 000FF3                     start 0000             ___param_bank 000000  
       __end_of_LCD_init 794E                    ?_main 0001          __end_of___awdiv 7A12  
        ___awdiv@divisor 0003             ?_key_scanner 0001          ___awdiv@counter 0005  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    status 000FD8          __initialization 78A6  
           __end_of_main 7D5C                   ??_main 0009            __activetblptr 000002  
              ??_LCD_cmd 0001         ___awdiv@dividend 0001                   _ANSELB 000F5C  
                 _ANSELC 000F5D                   _ANSELD 000F5E                   _OSCCON 000FD3  
              ??___awdiv 0005         __end_of_send2LCD 78EE         ___awdiv@quotient 0007  
                 isa$std 000001                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 78A6                ?_LCD_init 0001            ___rparam_used 000001  
         __pcstackCOMRAM 0001                LCD_cmd@cx 0001               ??_LCD_init 0002  
                _LCD_cmd 78B0                ?_send2LCD 0001                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 794E                  __pcinit 78A6  
                __ramtop 0800                  __ptext0 7B16                  __ptext1 78C4  
                __ptext2 7D5C                  __ptext3 7A12                  __ptext4 794E  
                __ptext5 78EE                  __ptext6 78B0            ??_char_to_seg 0001  
                main@key 000F                  main@res 000E     end_of_initialization 78A6  
          __Lmediumconst 0000               ??_send2LCD 0001                _PORTBbits 000F81  
              _TRISCbits 000F94      __end_of_char_to_seg 7B16      start_initialization 78A6  
             send2LCD@xy 0003            ??_key_scanner 0001                 ?_LCD_cmd 0001  
            _char_to_seg 7A12                 ?___awdiv 0001      __end_of_key_scanner 8000  
               _LATBbits 000F8A                 _LATCbits 000F8B                 _LCD_init 78EE  
               __Hrparam 0000                 __Lrparam 0000           char_to_seg@num 0003  
            _key_scanner 7D5C                 _send2LCD 78C4                 isa$xinst 000000  
               main@num1 000C                 main@num2 000D                 main@simb 000B  
           ?_char_to_seg 0001      char_to_seg@segments 0004  
